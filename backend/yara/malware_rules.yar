rule Mobile_Application_Files {
    meta:
        description = "Detects common mobile application file formats for Android and iOS"
        author = "Your Name"
        date = "2023-11-15"
        version = "1.0"
        reference = "Internal use"

    strings:
        // Android APK signatures
        $apk_magic = "PK"  // ZIP file signature (APK is a ZIP format)
        $android_manifest = "AndroidManifest.xml"
        
        // iOS IPA signatures
        $ipa_magic = "PK"  // IPA is also a ZIP format
        $payload_dir = "Payload/"
        $info_plist = "Info.plist"
        
        // AAB (Android App Bundle) signatures
        $aab_magic = { 41 6E 64 72 6F 69 64 20 41 70 70 20 42 75 6E 64 6C 65 } // "Android App Bundle"
        
        // XAPK/OBB signatures
        $obb_magic = { 78 70 61 6B 00 } // "xpak\0"
        
        // Common mobile code patterns
        $dart_string = "dart"  // Flutter apps
        $react_native = "react-native"
        $cordova_string = "cordova"
        $xamarin_string = "xamarin"

    condition:
        // Detect APK files
        (uint16(0) == 0x4B50 and $android_manifest) or
        
        // Detect IPA files
        (uint16(0) == 0x4B50 and $payload_dir and $info_plist) or
        
        // Detect AAB files
        ($aab_magic in (0..100)) or
        
        // Detect OBB/XAPK files
        ($obb_magic in (0..100)) or
        
        // Detect mobile frameworks in file content
        (any of ($dart_string, $react_native, $cordova_string, $xamarin_string))
}

rule Mobile_Threat_Hybrid_Detection
{
    meta:
        description = "Detects mobile malware, RATs, ransomware, downloader, and suspicious heuristics"
        author = "Your Name"
        date = "2025-07-31"
        version = "1.0"
        reference = "Hybrid Threat Detection PWA"

    strings:
        // === Advanced Malware Generic Detection ===
        $apk_magic = "PK"                      // APK & IPA ZIP signature
        $android_manifest = "AndroidManifest.xml"
        $ios_payload_dir = "Payload/"
        $ios_info_plist = "Info.plist"

        // === RAT Remote Access Detection ===
        $rat_ip = /(\d{1,3}\.){3}\d{1,3}/      // IP addresses (simple regex)
        $rat_c2_strings = "socket"             // Socket API call string
        $rat_cmd_exec = "exec"                 // Command execution functions

        // === Ransomware Detection ===
        $ransom_note = "DECRYPT_INSTRUCTIONS.txt"
        $ransom_note_alt = "README.txt"
        $ransom_file_ext = /\.locked$/
        $high_entropy_string = "encryption"

        // === Downloader Detection ===
        $wget_cmd = "wget"
        $curl_cmd = "curl"
        $base64_encoded = /[A-Za-z0-9+\/=]{40,}/   // Base64 string of length >=40 chars

        // === Regex Pattern Detection ===
        $email = /[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}/
        $password_str = "PASSWORD"
        $credit_card = /\b(?:\d[ -]*?){13,16}\b/

        // === Heuristic Indicators ===
        $obfuscation_strings = "eval" nocase
        $suspicious_permissions = "chmod 777"
        $unusual_metadata = "stego"

    condition:
        // Match APK or IPA signature + AndroidManifest or iOS Payload + Info.plist
        (
            (uint16(0) == 0x4B50 and $android_manifest) or
            (uint16(0) == 0x4B50 and $ios_payload_dir and $ios_info_plist)
        )
        or
        // RAT: IP + socket or exec calls found together
        (
            any of ($rat_ip) and
            any of ($rat_c2_strings, $rat_cmd_exec)
        )
        or
        // Ransomware: ransom note files or locked extension or keyword 'encryption'
        (
            any of ($ransom_note, $ransom_note_alt) or
            $ransom_file_ext or
            $high_entropy_string
        )
        or
        // Downloader: wget or curl commands with base64 strings
        (
            any of ($wget_cmd, $curl_cmd) and
            $base64_encoded
        )
        or
        // Regex hits: email or password or credit card pattern detected
        (
            any of ($email, $password_str, $credit_card)
        )
        or
        // Heuristic: obfuscation or suspicious permissions or stego
        (
            any of ($obfuscation_strings, $suspicious_permissions, $unusual_metadata)
        )
}
