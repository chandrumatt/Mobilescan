import "pe"
import "hash"
import "math"

rule Advanced_Malware_Generic_Detection
{
    meta:
        description = "Advanced detection of suspicious patterns in files with heuristic analysis"
        author = "YourName"
        date = "2025-06-25"
        severity = "high"
        reference = "https://yourdomain.com/yara-rules"
        version = "2.0"
    
    strings:
        // Common malware indicators
        $mz = "MZ"                              // PE header
        $pe = "This program cannot be run in DOS mode"
        $cmd = "cmd.exe" nocase
        $powershell = "powershell" nocase
        $wscript = "wscript" nocase
        $suspicious1 = /h4[c|k|4][e3]r?/ nocase
        $suspicious2 = /mal[-\s]?ware/ nocase
        $suspicious3 = /key[\s-]?log(ger)?/ nocase
        $url = /https?:\/\/[a-zA-Z0-9.\-\/]+/
        $ip = /\b\d{1,3}(?:\.\d{1,3}){3}\b/
        $tor = ".onion" nocase
        $hex1 = { 6A 40 68 00 30 00 00 6A 14 8D 91 }
        
        // Anti-analysis techniques
        $vm_check = /vbox|vmware|virtualbox|qemu|xen|hypervisor/i
        $debug_check = /IsDebuggerPresent|CheckRemoteDebuggerPresent|OutputDebugString/i
        $sandbox_check = /sandbox|wine|analyze/i
        
        // Common malware families
        $malware_families = /(AgentTesla|NanoCore|njRAT|DarkComet|Emotet|Dridex|TrickBot|Ryuk|REvil)/ nocase
        
        // Obfuscation patterns
        $obfuscation1 = /[a-z0-9]{50,}/ ascii
        $obfuscation2 = /(\w)\1{5,}/ ascii
        $obfuscation3 = /\w{30,}/ ascii
        
        // API calls
        $api_calls = /CreateRemoteThread|WriteProcessMemory|VirtualAllocEx|SetWindowsHookEx|RegOpenKeyEx/i
        
        // Embedded resources
        $resource_types = /(BIN|EXE|DLL|SCR|OCX|CPL)/ ascii
        
    condition:
        // Basic PE check
        uint16(0) == 0x5A4D and
        pe.is_pe and
        
        // Heuristic analysis
        (
            // Suspicious string combinations
            ( 
                (any of ($cmd, $powershell, $wscript)) and
                (any of ($url, $ip, $tor))
            ) or
            
            // Anti-analysis detection
            (any of ($vm_check, $debug_check, $sandbox_check)) or
            
            // Known malware family strings
            (any of ($malware_families)) or
            
            // Suspicious PE characteristics
            (
                pe.number_of_sections > 6 or
                pe.number_of_resources > 10 or
                math.entropy(0, filesize) > 7.0 or
                pe.exports("CreateRemoteThread") or
                pe.imports("VirtualAllocEx")
            ) or
            
            // Obfuscation detection
            (2 of ($obfuscation1, $obfuscation2, $obfuscation3))
        ) and
        
        // Minimum confidence threshold
        ( 
            filesize < 10MB and
            (pe.number_of_sections > 0 or pe.number_of_resources > 0) and
            (3 of ($mz, $pe, $url, $ip, $hex1, $malware_families, $api_calls, $resource_types))
        )
}

rule RAT_Remote_Access_Advanced
{
    meta:
        description = "Advanced detection of Remote Access Trojans with behavioral patterns"
        family = "RAT"
        severity = "high"
        version = "2.0"
    
    strings:
        // Common RAT strings
        $rat_strings = /(NanoCore|njRAT|DarkComet|QuasarRAT|AsyncRAT|NetWire|Remcos|DCRat)/ nocase
        
        // RAT behavioral patterns
        $rat_behavior1 = "ClientSocket"
        $rat_behavior2 = "RemoteShell"
        $rat_behavior3 = "Keylogger"
        $rat_behavior4 = "ScreenCapture"
        $rat_behavior5 = "MicrophoneCapture"
        
        // RAT configuration patterns
        $rat_config1 = /C2[_]?SERVER/i
        $rat_config2 = /PORT[\s]?=/
        $rat_config3 = /PASSWORD[\s]?=/
        
        // Network indicators
        $rat_network1 = /(http|ftp|tcp):\/\/[a-zA-Z0-9.\-\/:]+/
        $rat_network2 = /\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}:\d{1,5}/
        
    condition:
        // Basic detection
       (any of ($rat_strings)) or
    
    (
        (any of ($rat_behavior*)) and
        (any of ($rat_config*))
    ) or  // <-- added this 'or' inside the block
    (
        // Network pattern detection
        (2 of ($rat_network*))
    )
}

rule Ransomware_Locker_Advanced
{
    meta:
        description = "Advanced ransomware detection with encryption patterns"
        family = "Ransomware"
        severity = "critical"
        version = "2.0"
    
    strings:
        // Ransom messages
        $ransom_note = /(your files|encrypted|decrypt|pay|bitcoin|ransom|payment|wallet)/ nocase
        
        // Encryption markers
        $encryption1 = /AES[\s-]?256|RSA[\s-]?2048/
        $encryption2 = /CryptGenRandom|CryptEncrypt|CryptDeriveKey/
        $encryption3 = "BCryptEncrypt"
        
        // File extension patterns
        $extensions = /\.(locked|encrypted|ransom|crpyt|zeppelin)/
        
        // Payment instructions
        $payment1 = /1[a-zA-Z0-9]{26,33}/  // Bitcoin address pattern
        $payment2 = /monero|bitcoin|ethereum/i
        
    condition:
        // Basic detection
        (2 of ($ransom_note)) or
        
        // Encryption behavior
        (
            (any of ($encryption*)) and
            (any of ($extensions))
        ) or
        
        // Payment patterns
        (
            (any of ($payment*)) and
            (any of ($ransom_note))
        )
}

rule Downloader_Malware_Advanced
{
    meta:
        description = "Advanced detection of downloader malware with behavior analysis"
        family = "Downloader"
        severity = "high"
        version = "2.0"
    
    strings:
        // Download APIs
        $download_apis = /(URLDownloadToFile|InternetOpenUrl|WinHttpOpenRequest|DownloadFile)/ nocase
        
        // Common downloader strings
        $downloader_strings = /(wget|curl|Invoke-WebRequest|Start-BitsTransfer|certutil)/ nocase
        
        // Payload patterns
        $payload1 = /(exe|dll|ps1|bat|vbs|js)$/ nocase
        $payload2 = /(http|ftp|tcp):\/\/[a-zA-Z0-9.\-\/:]+/
        
        // Obfuscated URLs
        $obf_url = /(hxxp|httpx|ftpX):\/\/[a-zA-Z0-9.\-\/:]+/
        
    condition:
        // API detection
        (pe.imports($download_apis)) or
        
        // String detection with context
        (
            (any of ($downloader_strings)) and
            (any of ($payload*))
        ) or
        
        // Obfuscated URL detection
        (any of ($obf_url))
}

rule Heuristic_File_Characteristics
{
    meta:
        description = "Detects suspicious file characteristics common in malware"
        severity = "medium"
        version = "2.0"
    
    condition:
        // Suspicious PE characteristics
        (
            pe.is_pe and
            (
                // Many sections with unusual names
                (pe.number_of_sections > 6) or
                
                // Suspicious section characteristics
                (for any section in pe.sections : (
                    section.name == "" or
                    section.name == " " or
                    section.raw_size == 0 or
                    section.virtual_size > 10 * section.raw_size
                )) or
                
                // High entropy sections
                (for any section in pe.sections : (
                    math.entropy(section.offset, section.size) > 7.0
                )) or
                
                // Suspicious imports
                (pe.imports("VirtualAlloc") and pe.imports("CreateRemoteThread")) or
                
                // Suspicious exports
                (pe.exports("Start") and not pe.exports("DllMain"))
            )
        ) or
        
        // Non-PE suspicious characteristics
        (
            not pe.is_pe and
            (
                // High entropy in script files
                (math.entropy(0, filesize) > 7.5 and filesize < 1MB) or
                
                // Large embedded data in small files
                (filesize < 100KB and #url > 5) or
                
                // Mixed content types
                (contains("<?php") and contains("<script>"))
            )
        )
}

rule Android_Malware_Generic_Advanced
{
    meta:
        description = "Detects known Android malware traits and behaviors"
        author = "Roshan Muttath Francis"
        target = "APK/DEX"
        severity = "high"
        version = "1.0"
    
    strings:
        $dex_magic = { 64 65 78 0A 30 33 35 00 }  // 'dex\n035\0'
        $apk_sign = "AndroidManifest.xml"
        $payload1 = "com.metasploit.stage"
        $payload2 = "com.androguard"
        $payload3 = "com.elite.malware" nocase
        $cmd_exec = "Runtime.getRuntime().exec" nocase
        $net1 = "HttpURLConnection" nocase
        $net2 = "Socket" nocase
        $root_check = "su" ascii
        $obf_class = /L[a-z]{10,}\// ascii
        $crypto = "AES/CBC/PKCS5Padding" ascii
        $dropper = "downloadAndExecute" ascii

    condition:
        (uint32(0) == 0x504B0304) and  // ZIP magic for APK
        (
            2 of ($payload*) or
            ($cmd_exec and ($net1 or $net2)) or
            ($crypto and $dropper) or
            (2 of ($root_check, $obf_class, $cmd_exec))
        )
}

rule Android_RAT_RemoteAccess
{
    meta:
        description = "Detects Android Remote Access Trojan behavior"
        severity = "critical"
        category = "RAT"
    
    strings:
        $rat1 = "com.metasploit.stage"
        $rat2 = "com.connectbot"
        $rat3 = "keylogger" nocase
        $ip = /\d{1,3}(\.\d{1,3}){3}/
        $port = /:[0-9]{2,5}/
        $permissions = "android.permission.RECEIVE_BOOT_COMPLETED"
        $auto_start = "android.intent.action.BOOT_COMPLETED"

    condition:
        (any of ($rat*)) and
        (any of ($ip, $port)) and
        ($permissions and $auto_start)
}

rule Android_Permission_Abuse
{
    meta:
        description = "Detects dangerous permission combinations in APKs"
        severity = "medium"
    
    strings:
        $perm1 = "android.permission.READ_SMS"
        $perm2 = "android.permission.SEND_SMS"
        $perm3 = "android.permission.RECORD_AUDIO"
        $perm4 = "android.permission.READ_CONTACTS"
        $perm5 = "android.permission.WRITE_EXTERNAL_STORAGE"

    condition:
        3 of ($perm*)
}

rule APK_Dropper_Detection
{
    meta:
        description = "Detects APKs that download and execute payloads"
        severity = "high"
    
    strings:
        $url_pattern = /https?:\/\/[a-z0-9\-.]+\/[a-zA-Z0-9_\-]+\.(apk|dex|so)/ nocase
        $cmd1 = "Runtime.getRuntime().exec"
        $payload_path = "/sdcard/" nocase
        $obfuscation = /([A-Za-z0-9]{40,})/ ascii

    condition:
        ($cmd1 and $url_pattern) or
        ($payload_path and $obfuscation)
}

rule Suspicious_Zip_File
{
    meta:
        description = "Detects ZIP files with suspicious embedded executables or naming patterns"
        author = "ChatGPT"
        last_modified = "2025-07-23"
        reference = "https://yara.readthedocs.io"

    strings:
        // ZIP header (PK)
        $zip_magic = { 50 4B 03 04 }

        // Suspicious extensions or double extensions
        $exe_ext = ".exe"
        $scr_ext = ".scr"
        $js_ext  = ".js"
        $doc_double = ".doc.exe"
        $pdf_double = ".pdf.exe"
        $xls_double = ".xls.exe"

        // Possible obfuscated filenames (e.g., .jpg.exe)
        $obfuscated_ext = /[a-zA-Z0-9_]{1,20}\.(jpg|png|pdf|doc|txt)\.exe/

        // Strings often used in password-protected archives
        $password_str1 = "This file is password protected"
        $password_str2 = "Use password to extract"
        $pass_hint1 = "pass:"

    condition:
        $zip_magic at 0 and
        2 of ($exe_ext, $scr_ext, $js_ext, $doc_double, $pdf_double, $xls_double, $obfuscated_ext) or
        any of ($password_str*)
}
